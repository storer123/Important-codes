//Bubble Sort (optimized) 
//stable and inplace
#include <bits/stdc++.h> 
void bubbleSort(vector<int>& arr, int n)
{   bool swaped;
    for(int i=0;i<n-1;i++){
        swaped=false;
        for(int j=0;j<n-1-i;j++){
            if(arr[j]>arr[j+1]){
                swap(arr[j],arr[j+1]);
                swaped=true;
            }
        }
        if(!swaped)break;
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
//Insertion Sort 
//stable and inplace
//can be done by recursion as well but space becomes o(n)
//efficient for small values near 40, better for partially sorted,inplace
#include <bits/stdc++.h> 
void insertionSort(int n, vector<int> &arr){
    for(int i=1;i<n;i++){
        int key=arr[i];
        int j=i-1;
        while(j>=0&&key<arr[j]){
            arr[j+1]=arr[j];
            j--;
        }j++;
        arr[j]=key;
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
//Selecton sort 
//inplace and not stable (there exist a stable non standard one)
#include <bits/stdc++.h> 
void selectionSort(vector<int>& arr, int n)
{   
    for(int i=0;i<n-1;i++){
        int minind=i;
        for(int j=i+1;j<n;j++){
            if(arr[j]<arr[minind])
                minind=j;
        }
        swap(arr[minind],arr[i]);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------
// Merge Sort
#include <bits/stdc++.h>

void merge(vector < int > & arr,int start,int end)
{
    int mid=start+(end-start)/2;
    int len1=mid-start+1;
    int len2=end-mid;

    //make 2 array of lenght len1 and len2
    vector<int> temp1(len1+1),temp2(len2+1);
    temp1[len1]=INT_MAX;temp2[len2]=INT_MAX;
    int index=start;
    for(int i=0;i<len1;i++)
    {
        temp1[i]=arr[index++];
    }
    index=mid+1;
     for(int i=0;i<len2;i++)
    {
        temp2[i]=arr[index++];
    }
    int i=0;
    int j=0;
    index=start;
    while(1)
    {
        if(temp1[i] < temp2[j])
        arr[index++]=temp1[i++];
        else
         arr[index++]=temp2[j++];
         if(i==len1&&j==len2)
            return;
    }
}

void mergeSortHelper(std::vector<int> &arr, int left, int right) {
    if (left >= right) {
        return;
    }
    int mid = left + (right - left) / 2;
    mergeSortHelper(arr, left, mid);
    mergeSortHelper(arr, mid + 1, right);
    merge(arr, left,  right);
}

void mergeSort(vector < int > & arr, int n) {
    mergeSortHelper(arr,0,n-1);
}
