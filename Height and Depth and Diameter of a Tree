#include<bits/stdc++.h>
using namespace std;
const int N = 1e5+9;
vector<int> tree[N];
vector<int> depth(N);
vector<int> height(N);
void dfs(int vertex,int par=0){   
    for(auto child : tree[vertex]){
        if(child==par){
            continue;
        }
        depth[child] = depth[vertex] + 1;
        dfs(child,vertex);
        height[vertex]=max(height[vertex],height[child]+1);
    }
}
int main(){
    int n,m;
    cin>>n>>m;
    int i,j;
    while(m--){
        cin>>i>>j;
        tree[i].push_back(j);
        tree[j].push_back(i);
    }
    dfs(1);
    for(int i=1;i<n+1;i++){
        cout<<height[i]<<" "<<depth[i]<<"\n";
    }
    return 0;
}
-------------------------------------------------------DIAMETER------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;
//graph representation adjacency matrix and adjacency list
//input as n m 1 2 3   4 3 5   4 6 7 ,where n represents no. of vertices and m represents no. of edges
const int N = 1e5+9;
vector<int> tree[N];
vector<int> depth(N);
vector<int> height(N);
void dfs(int vertex,int par=0){   
    for(auto child : tree[vertex]){
        if(child==par)continue;
        depth[child] = depth[vertex] + 1;
        dfs(child,vertex);
    }

}
int main(){
    int n,m;
    cin>>n>>m;
    int i,j;
    while(m--){
        cin>>i>>j;
        tree[i].push_back(j);
        tree[j].push_back(i);
    }
    dfs(1);
    int mx_depth=-1;
    int mx_d_node;
    for(int i=1;i<n+1;i++){
        if(mx_depth<depth[i]){
            mx_depth=depth[i];
            mx_d_node=i;
        }depth[i]=0;
    }
    dfs(mx_d_node);
    mx_depth=-1;
    for(int i=1;i<n+1;i++){
        if(mx_depth<depth[i]){
            mx_depth=depth[i];
            mx_d_node=i;
        }
    }
    cout<<mx_depth;
    return 0;
}
