//for target finding in sorted array.
mid=(en-st)/2;
while(st<=en){
    if(arr[mid]==target){
        return mid;
    else if(arr[mid]<target){
        st=mid+1;
    }
    else
        en=mid-1;
}
----------------------------------------------------------------------------------------------------------------------------
//
vector<int> v1={1,2,3,4,6,7};
    if(binary_search(v1.begin(),v1.end(),5)){             // for array(v1,v1+n,5)
        cout<<lower_bound(v1.begin(),v1.end(),6)-v1.begin(); // -v1
    }
    else{
        cout<<-1;
    }
//square root
ll st=0,en=N,mid;
    //int eps=1e4;
    mid=(st+en)/2;
    while(en >=st){
        ll ans=mid*mid;
        if(ans==N){
            return mid;
        }
        else if(ans<N){
            st=mid+1;
        }
        else{
            en=mid-1;
        }
        mid=(st+en)/2;
    //cout<<mid;
    }
    return mid;
----------------------------------------------------------------------------------------------------------------------------
//3th square root with 4 precision 
double eps=1e-4;//4 precision any value greater or smaller than 1e6 should be done outside
long long multiply (long long mid,int n){
    long long p=1;
    for(int i=0;i<n;i++){
        p*=m;
    }
    return p;
}
void solve(){
    double n,p;
    cin>>n>>p;
    double st=0,en=n,mid;
    
    mid=(st+en)/2;
    while(en-st >eps){
        ll ans=multiply(mid,3);
        if(ans<n){
            st=mid;
        }
        else{
            en=mid;
        }
        mid=(st+en)/2;
    }
    cout<<setprecision(10)<< mid<<" "<<sqrt(10.0);//or pow(10,1.0/4)
}
----------------------------------------------------------------------------------------------------------------------------
//non duplicate
int singleNonDuplicate(std::vector<int>& nums) {
    int left = 0;
    int right = nums.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        // Check if mid is even
        bool evenMid = (mid % 2 == 0);

        if (nums[mid] == nums[mid + 1]) {
            if (evenMid) {
                left = mid + 2;
            } else {
                right = mid - 1;
            }
        } else if (nums[mid] == nums[mid - 1]) {
            if (evenMid) {
                right = mid - 2;
            } else {
                left = mid + 1;
            }
        } else {
            return nums[mid];
        }
    }

    //return nums[left];
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
