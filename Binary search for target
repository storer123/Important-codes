(just don't forget to sort the array or see if predicate is monotonous)
------------------------------------------------------------------------------------------------------------------------------------------------

//for target finding in sorted array.
mid=(en-st)/2;
while(st<=en){
    if(arr[mid]==target){
        return mid;
    else if(arr[mid]<target){
        st=mid+1;
    }
    else
        en=mid-1;
}
--------------------------------------------------------------------------------------------------------------------------------------------------
//lower and upper bound if exist lower bound=target else both just  greatest number
//lower bound
ans=-1;
while(l<=r){
    mid=l+(r-l)/2;
    if(mid>=target){
        ans=mid;        //imp
        r=mid-1;
    }
    else l=mid+1;
}
return ans;
--------------------------------------------------------------------------------------------------------------------------------------------------
//does it exist if yes give it's index

vector<int> v1={1,2,3,4,6,7};
    if(binary_search(v1.begin(),v1.end(),5)){             // for array(v1,v1+n,5)
        cout<<lower_bound(v1.begin(),v1.end(),6)-v1.begin(); // -v1
    }
    else{
        cout<<-1;
    }
----------------------------------------------------------------------------------------------------------------------------------------------------
//square root
ll st=0,en=N,mid;
    //int eps=1e4;
    mid=(st+en)/2;
    while(en >=st){
        ll ans=mid*mid;
        if(ans==N){
            return mid;
        }
        else if(ans<N){
            st=mid+1;
        }
        else{
            en=mid-1;
        }
        mid=(st+en)/2;
    //cout<<mid;
    }
    return mid;
----------------------------------------------------------------------------------------------------------------------------
//3th square root with 4 precision 
double eps=1e-4;//4 precision any value greater or smaller than 1e6 should be done outside
long long multiply (long long mid,int n){
    long long p=1;
    for(int i=0;i<n;i++){
        p*=m;
    }
    return p;
}
void solve(){
    double n,p;
    cin>>n>>p;
    double st=0,en=n,mid;
    
    mid=(st+en)/2;
    while(en-st >eps){
        ll ans=multiply(mid,3);
        if(ans<n){
            st=mid;
        }
        else{
            en=mid;
        }
        mid=(st+en)/2;
    }
    cout<<setprecision(10)<< mid<<" "<<sqrt(10.0);//or pow(10,1.0/4) as 4th root
}
----------------------------------------------------------------------------------------------------------------------------
//non duplicate
int singleNonDuplicate(std::vector<int>& nums) {
    int left = 0;
    int right = nums.size() - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        // Check if mid is even
        bool evenMid = (mid % 2 == 0);

        if (nums[mid] == nums[mid + 1]) {
            if (evenMid) {
                left = mid + 2;
            } else {
                right = mid - 1;
            }
        } else if (nums[mid] == nums[mid - 1]) {
            if (evenMid) {
                right = mid - 2;
            } else {
                left = mid + 1;
            }
        } else {
            return nums[mid];
        }
    }

    //return nums[left];
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------
//my favourite , unthinkable at first , predicate function approach
//aggresive cows(similar to wood required , just don't forget to sort)
#include<bits/stdc++.h>
bool ispossible(vector<int> &stalls,int m,int k){        //predicate function of type TTTTFFFF
    int prev=-1;int n=stalls.size();int cnt=k;
    for(int i=0;i<n;i++){
        if(stalls[i]-prev>=m||prev==-1){
            cnt--;
            prev=stalls[i];
        }if(cnt==0)return true;
    }
    return false;
}
int aggressiveCows(vector<int> &stalls, int k) {
    int n=stalls.size();
    int lo=0,hi=1e9,ans=-1;
    sort(stalls.begin(),stalls.end());
    while(lo<=hi){
        int mid=lo+(hi-lo)/2;
        if(ispossible(stalls,mid,k)){
            ans=mid;                                  //why not mid-1 as lo is true and we want to include it we don't know if we will find it in future.
            lo=mid+1;
        }
        else{
            hi=mid-1;
        }
    }
     return ans;
}
----------------------------------------------------------------------------------------------------------------------------------------------------------
//though not good but for midean in a row sorted matrix 
#include <bits/stdc++.h>
int count(int mid, vector<vector<int>> &matrix){
    int cnt=0;
    for(auto row : matrix){
        auto it=upper_bound(row.begin(),row.end(),mid);
        cnt+=(it-row.begin());
    }return cnt;
}
int getMedian(vector<vector<int>> &matrix)
{
    int n = matrix.size();

    int m = matrix[0].size();
    int total=n*m/2;
    vector<int> v;
    int low=INT_MAX,high=INT_MIN;
    for(int i=0 ; i<n ; i++){

        low=min(low,matrix[i][0]);
        high=max(high,matrix[i][m-1]);
    }
    int ans=-1;
    while(low<=high){
        int mid=low+(high-low)/2;
        if(count(mid,matrix)>total){
            ans=mid;
            high=mid-1;
        }
        else low=mid+1;
    }
    return ans;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------
