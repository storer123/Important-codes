Template
#include <bits/stdc++.h>
using namespace std;
#define f(i, a, b) for(int i = a; i < (b); ++i)
#define rf(i, a, b) for(int i = a; i >= (b); --i)
#define all(x) begin(x), end(x)
#define sz(x) (int)(x).size()
typedef long long ll;
typedef pair<ll, ll> pll;
typedef vector<ll> vl;
void solve()
{
}
int main() {
    cin.tie(0)->sync_with_stdio(0);
    int T = 1; cin >> T; 
    while(T--) solve();
}
.bashrc
alias c='g++ -Wall -Wconversion -Wfatal-errors -g -std=c++14 fsanitize=undefined,address'
alias x='./a.out
Extended Template
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
template<class T> using pbset=tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;
template<class T> using pbmultiset=tree<T, null_type, less_equal<T>, rb_tree_tag,tree_order_statistics_node_update> ;
cout<<*s.find_by_order(1)<<endl;  //element at index t in O(logn)
cout<<s.order_of_key(6)<<endl; //how many elements less than 5 (this one is valid for multiset too)... or,position of 5 or rank of 5 (for set only)
#define pqmax priority_queue<ll>
#define pqmin priority_queue<ll,vector<ll>,greater<ll>>
#define gcd(a,b) __gcd(a,b)
#define lcm(a,b) (1LL*(a/gcd(a,b))*b)
#define fix(prec) {cout << setprecision(prec) << fixed;}
#define dbg(v) cout << "Line(" << __LINE__ << ") -> " << #v << " = " << (v) << endl;
template<typename T> istream& operator>>(istream& is,  vector<T> &v){for (auto& i : v) is >> i; return is;}
template<typename T> ostream& operator<<(ostream& os,  vector<T> &v){for (auto& i : v) os << i << ' '; return os;}
#define present(c, x) (c.find(x) != c.end())
#define cpresent(c, x) (find(all(c), x) != c.end())
#define tr(c, i) for (typeof (c).begin() i = c.begin(); i != c.end(); i++)
///.........Bit_Manipulation...........///
#define MSB(mask) 63-__builtin_clzll(mask)  /// 0 -> -1
#define LSB(mask) __builtin_ctzll(mask)  /// 0 -> 64
#define SETBIT(mask) __builtin_popcountll(mask)
#define CHECKBIT(mask,bit) (mask&(1LL<<bit))
#define ONBIT(mask,bit) (mask|(1LL<<bit))
#define OFFBIT(mask,bit) (mask&~(1LL<<bit))
#define CHANGEBIT(mask,bit) (mask^(1LL<<bit))
ll madd(ll a, ll b) {return (a%mod + b%mod) % mod;}
ll msub(ll a, ll b) {return (((a%mod - b%mod) % mod) + mod) % mod;}
ll mmul(ll a, ll b) {return ((a % mod) * (b % mod)) % mod;}
ll mpow(ll base, ll exp) {ll res = 1;
    while (exp) {if (exp % 2 == 1){es = (res * base) % mod;}
    exp >>= 1;base = (base * base) % mod;}
    return res;}
ll minv(ll base) {return mpow(base, mod - 2);}
ll mdiv(ll a, ll b) {return mmul(a, minv(b));}


#define power(a,b) (ll)(pow(a,b)+0.5)
#define gcd __gcd
//int LCM(int a, int b){int greater = max(a, b);int smallest = min(a, b);for(int i = greater; ; i += greater){if (i % smallest  == 0)return i;}}
#define remove_unique(x) x.erase(unique(x.begin(),x.end()),x.end())
#define to_lowercase(s) transform(s.begin(), s.end(), s.begin(), ::tolower)
#define to_uppercase(s) transform(s.begin(), s.end(), s.begin(), ::toupper)
#define pqmax priority_queue<ll>
#define pqmin priority_queue<ll,vector<ll>,greater<ll>>
#define inc(x,start) iota(x.begin(),x.end(),start)
#define pi  3.141592653589793238
template<typename T> istream& operator>>(istream& is,  vector<T> &v){for (auto& i : v) is >> i; return is;}
template<typename T> ostream& operator<<(ostream& os,  vector<T> &v){for (auto& i : v) os << i << ' '; return os;}
long long Sqrt(long long x){ long long y=sqrt(x)+5;while(y*y>x)y--;return y;}
struct custom_hash {static uint64_t splitmix64(uint64_t x) {x += 0x9e3779b97f4a7c15;x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;x = (x ^ (x >> 27)) * 0x94d049bb133111eb;  return x ^ (x >> 31);}size_t operator()(uint64_t x) const {static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();return splitmix64(x + FIXED_RANDOM);}};
unordered_map<long long, int, custom_hash> safe_map;
template<class T> void _print(T t){ cerr << t;}
//for C(c,m)  int cc=1;f(i,0,m){ cc *= (c-i);}f(i,2,m+1){cc/=i;}
// bool sw(pair<int,int> a,pair<int,int> b) {if(a.first!=b.first){if(a.first<b.first){return true;}return false;}else{if(a.second>b.second){return true;}return false;}}
//bool isPrime( int n ) {if ( n == 1 ) return false;if ( n == 2 ) return true;if ( n%2 == 0 ) return false;for ( int i = 3; i * i <= n; i += 2 )if ( n%i == 0 ) return false;return true;}
// for (i=1;i<=n;i++)for (j=i;j<=n;j+=i)cnt[j]++;
//const int MAXN=1e7;bool isprime[MAXN+5];vector<int> primes;
void sieve(){  memset(isprime,true,sizeof(isprime));isprime[1]=false;for(int i=4; i <= MAXN; i+=2) isprime[i]=false;for(int i = 3; i*i <= MAXN; i+=2)if(isprime[i])for(int j = i*i; j <= MAXN; j+=2*i)isprime[j] = false;}
//vector<bool> pr(1000000,1);vector<ll> prps(1000000,0);void isPrime(ll m){pr[0]=0;pr[1]=0;pr[2]=1;for(ll i=4;i<=m;i+=2){pr[i]=0;}for(ll i=3;i*i<=m;i+=2){if(pr[i]){for(ll j=i*i;j<=m;j+=2*i){pr[j]=0;}}}f(i,1,m){prps[i]+=prps[i-1]+pr[i];}    }
//int binomialCoeff(int n, int k){int res = 1;if (k > n - k)k = n - k;for (int i = 0; i < k; ++i){res *= (n - i);res /= (i + 1);}return res;}
//--------------------------------------------------------------------------------------------------------------------------------------//
int gcdExtended(int a, int b, int *x, int *y){    if (a == 0)    { *x = 0;   *y = 1; return b;}//ax+by=c=gcd(a,b)
     int x1, y1; // To store results of recursive call
    int gcd = gcdExtended(b%a, a, &x1, &y1);// Update x and y using results *x = y1 - (b/a) * x1;*y = x1; return gcd;})
//Legendre’s formula (Given p and n, find the largest x such that p^x divides n!)
int largestPower(int n, int p) {    int x = 0;  // Calculate x = n/p + n/(p^2) + n/(p^3) + ....
    while (n)   { n /= p; x += n;} return x;  }
 //power(b, n-1) MOD n = 1,  for all b ranging from 1 to n such that b and n are //relatively prime, i.e, gcd(b, n) = 1
int power(int x, int y, int mod){
    if (y == 0) return 1;
    int temp = power(x, y / 2, mod) % mod; temp = (temp * temp) % mod;
    if (y % 2 == 1) temp = (temp * x) % mod; return temp;
}
bool isCarmichaelNumber(int n)
{    for (int b = 2; b < n; b++) {
        // If "b" is relatively prime to n
        if (gcd(b, n) == 1) 
            // And pow(b, n-1)%n is not 1,
            // return false.
            if (power(b, n - 1, n) != 1) return false; }
    return true;}
//for finding 1 divisor of a composite number
long long int modular_pow(long long int base, int exponent,
                          long long int modulus)
{
    /* initialize result */
    long long int result = 1;
    while (exponent > 0)
    {
        if (exponent & 1) result = (result * base) % modulus;
        exponent = exponent >> 1;  base = (base * base) % modulus;
    }
    return result;
}
 
/* method to return prime divisor for n */
long long int PollardRho(long long int n)
{
    /* initialize random seed */
    srand (time(NULL));
    if (n==1) return n;
    if (n % 2 == 0) return 2;
    long long int x = (rand()%(n-2))+2;
    long long int y = x;
    long long int c = (rand()%(n-1))+1;
    long long int d = 1; 
    while (d==1)
    {
        x = (modular_pow(x, 2, n) + c + n)%n;
        y = (modular_pow(y, 2, n) + c + n)%n;
        y = (modular_pow(y, 2, n) + c + n)%n;
        d = __gcd(abs(x-y), n);
        if (d==n) return PollardRho(n);
    }
 
    return d;
}
 //Goldbach's conjecture  Every even integer greater than 2 can be expressed as the sum of two primes.
const int MAX = 10000;
// Array to store all prime less than and equal to 10^6
vector <int> primes;
// use prime sieve here
void findPrimes(int n)
{
	// Return if number is not even or less than 3
	if (n<=2 || n%2 != 0)
	{
		cout << "Invalid Input \n";
		return;
	}


	// Check only upto half of number
	for (int i=0 ; primes[i] <= n/2; i++)
	{
		// find difference by subtracting current prime from n
		int diff = n - primes[i];


		// Search if the difference is also a prime number
		if (binary_search(primes.begin(), primes.end(), diff))
		{
			// Express as a sum of primes
			cout << primes[i] << " + " << diff << " = "
				<< n << endl;
			return;
		}
	}
}
int main() {sieve();	findPrimes(38);}
//fact : every 2^2n + 1 is a prime no.
//sum of divisors of factorial
vector<int> allPrimes;
void sieve(int n)
{   … } 
// Function to find all result of factorial number
int factorialDivisors(int n)
{
    sieve(n);  
    int result = 1; 
    for (int i = 0; i < allPrimes.size(); i++)
    {
        // Current divisor
        int p = allPrimes[i]; 
        // Find the highest power (stored in exp)'  // of allPrimes[i] that divides n using   // Legendre's formula.
        int exp = 0;
        while (p <= n)
        {
            exp = exp + (n/p);
            p = p*allPrimes[i];
        } 
        result = result*(pow(allPrimes[i], exp+1)-1)/
                                    (allPrimes[i]-1);
    } 
    return result;
}Input : 10 | Output : 1 3 7 9 | The set to be generated is {0, 1, .. 9} | By adding 1, single or more times, we can create all elments from 0 to 9. | Similarly using 3, we can generate all elements. |30 % 10 = 0, 21 % 10 = 1, 12 % 10 = 2, ...Same is true for 7 and 9.Input  : 24 | Output : 1 5 7 11 13 17 19 23
 int printGenerators(unsigned int n)
{    // 1 is always a generator
    cout << "1 ";  
    for (int i=2; i < n; i++)  
        // A number x is generator of GCD is 1
        if (gcd(i, n) == 1)
            cout << i << " ";
}
  ell expo1(ell a, ell b, ell mod) {
    ell res = 1; 
    while (b > 0) {
        if (b & 1)
            res = (res * a) % mod; 
        a = (a * a) % mod; 
        b = b >> 1;
    } 
    return res;
}


bool check_composite(ell n, ell a, ell d, ell s) {
    ell x = expo1(a, d, n);
    if (x == 1 || x == n - 1)
        return false;
    for (int r = 1; r < s; r++) {
        x = (x * x) % n;
        if (x == n - 1)
            return false;
    }
    return true;
};


bool MillerRabin(ell n) { // returns true if n is prime, else returns false.
    if (n < 2)
        return false;


    int r = 0;
    ll d = n - 1;
    while ((d & 1) == 0) {
        d >>= 1;
        r++;
    }
    for (int a : {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37}) {
        if (n == a)
            return true;
        if (check_composite(n, a, d, r))
            return false;
    }
    return true;
}
 DSU
class dsu{
    public:
    vector<long long> parent;
    dsu(long long n)
    {
        parent=vector<long long>(n,-1);
    }
    long long find_set(long long v)
    { 
        if(parent[v]<0)
        return v;
        return parent[v]=find_set(parent[v]);
    }
    void make_union(long long u,long long v)
    {  
        if(abs(parent[u])<abs(parent[v]))
            swap(u,v);  //as below we are considering u as more weighted or greater size graph
        parent[u]=parent[u]+parent[v];
        parent[v]=u;
    }
    void merge(ll x,ll y)
    {
        long long u=find_set(x);
        long long v=find_set(y);
        if(u!=v)
            make_union(u,v);
    }
    bool check_cycle(ll x,ll y)
    {
        long long u=find_set(x);
        long long v=find_set(y);
        if(u!=v)
            return false;    //cycle (will not form)/(not present)
        return true;      //cycle (will form)/(present)
    }
    bool CycleDetectionUndirectedDSU(vector<pair<long long,long long>> &edges)
    {
        for(auto i:edges)
        { 
        long long u=find_set(i.first);
        long long v=find_set(i.second);
        if(u==v)
        return true;
        else
        make_union(u,v);
        }
        return false;
    }
};




Segment Tree
int n, t[4*MAXN];
// The procedure for constructing the Segment Tree from a given array a[] looks like this: it is a recursive function with the parameters 
// a[](the input array),v (the index of the current vertex), and the boundaries tl and tr of 
//the current segment. In the main program this function will be called with the parameters of the root vertex: 
// v = 1,tl = 0, and tr = n - 1.
void build(int a[], int v, int tl, int tr) {
    if (tl == tr) {
        t[v] = a[tl];
    } else {
        int tm = (tl + tr) / 2;
        build(a, v*2, tl, tm);
        build(a, v*2+1, tm+1, tr);
        t[v] = t[v*2] + t[v*2+1];
    }
}
// Further the function for answering sum queries is also a recursive function, which receives as parameters information about the current vertex/segment (i.e. the index  
// v and the boundaries tl and tr and also the information about the boundaries of the query, l and r. In order to simplify the code, this function 
// always does two recursive calls, even if only one is necessary - in that case the superfluous recursive call will have  
// l > r, and this can easily be caught using an additional check at the beginning of the function
int sum(int v, int tl, int tr, int l, int r) {
    if (l > r) 
        return 0;
    if (l == tl && r == tr) {
        return t[v];
    }
    int tm = (tl + tr) / 2;
    return sum(v*2, tl, tm, l, min(r, tm))
           + sum(v*2+1, tm+1, tr, max(l, tm+1), r);
}
// Finally the update query. The function will also receive information about the current vertex/segment, 
// and additionally also the parameter of the update query (i.e. the position of the element and its new value).
void update(int v, int tl, int tr, int pos, int new_val) {
    if (tl == tr) {
        t[v] = new_val;
    } else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update(v*2, tl, tm, pos, new_val);
        else
            update(v*2+1, tm+1, tr, pos, new_val);
        t[v] = t[v*2] + t[v*2+1];
    }
}
Finding the maximum and the number of times it appears
pair<int, int> t[4*MAXN];
pair<int, int> combine(pair<int, int> a, pair<int, int> b) {
    if (a.first > b.first) 
        return a;
    if (b.first > a.first)
        return b;
    return make_pair(a.first, a.second + b.second);
}
void build(int a[], int v, int tl, int tr) {
    if (tl == tr) {
        t[v] = make_pair(a[tl], 1);
    } else {
        int tm = (tl + tr) / 2;
        build(a, v*2, tl, tm);
        build(a, v*2+1, tm+1, tr);
        t[v] = combine(t[v*2], t[v*2+1]);
    }
}
pair<int, int> get_max(int v, int tl, int tr, int l, int r) {
    if (l > r)
        return make_pair(-INF, 0);
    if (l == tl && r == tr)
        return t[v];
    int tm = (tl + tr) / 2;
    return combine(get_max(v*2, tl, tm, l, min(r, tm)), 
                   get_max(v*2+1, tm+1, tr, max(l, tm+1), r));
}
void update(int v, int tl, int tr, int pos, int new_val) {
    if (tl == tr) {
        t[v] = make_pair(new_val, 1);
    } else {
        int tm = (tl + tr) / 2;
        if (pos <= tm)
            update(v*2, tl, tm, pos, new_val);
        else
            update(v*2+1, tm+1, tr, pos, new_val);
        t[v] = combine(t[v*2], t[v*2+1]);
    }
}
Topological Sort
void dfs(int start, vector<int>*edges, bool *visited, vector<int>& ans)
{
	visited[start] = true;
	for (auto i : edges[start])
	{
		if (visited[i])
			continue;
		dfs(i, edges, visited, ans);
	}
	ans.pb(start);
}
vector<int> topo_sort(int n, vector<int>*edges)
{
	vector<int> v1;
	bool *visited = new bool[n]();
	for (int i = 0; i < n; i++)
	{
		if (visited[i])
			continue;
		dfs(i, edges, visited, v1);
	}
	reverse(v1.begin(), v1.end());
	return v1;
}


BFS
vector<vector<int>> adj;  // adjacency list representation
int n; // number of nodes
int s; // source vertex
queue<int> q;
vector<bool> used(n);
vector<int> d(n), p(n);
q.push(s);used[s] = true;
p[s] = -1;
while (!q.empty()) {
    int v = q.front();
    q.pop();
    for (int u : adj[v]) {
        if (!used[u]) {
            used[u] = true;q.push(u); d[u] = d[v] + 1;p[u] = v; }}}
If we have to restore and display the shortest path from the source to some vertex u, it can be done in the following manner:
if (!used[u]) {
    cout << "No path!";
} else {
    vector<int> path;
    for (int v = u; v != -1; v = p[v]) path.push_back(v);
    reverse(path.begin(), path.end()); cout << "Path: ";
    for (int v : path) cout << v << " ";
}
DFS
>Find any path in the graph from source vertex u to all vertices. 
>Find lexicographical first path in the graph from source u to all vertices.
>Check if a vertex in a tree is an ancestor of some other vertex:
At the beginning and end of each search call we remember the entry and exit "time" of each vertex. Now you can find the answer for any pair of vertices  
(i, j) in O(1): vertex i is an ancestor of vertex j if and only if entry[i] < entry[j]and exit[i] > exit[j].
>Check whether a given graph is acyclic and find cycles in a graph. (As mentioned above by counting back edges in every connected components).
>Find strongly connected components in a directed graph:
>First do a topological sorting of the graph. Then transpose the graph and run another series of 
depth first searches in the order defined by the topological sort. For each DFS call the component created by it is a strongly connected component.
>Find bridges in an undirected graph: First convert the given graph into a directed graph by running a series of depth first searches and making each edge directed as we go through it,in the direction we went. Second, find the strongly connected components in this directed graph. Bridges are the edges whose ends belong to different strongly connected components.
Cycle-Directed
int n;vector<vector<int>> adj;vector<char> color;vector<int> parent;int cycle_start, cycle_end;
bool dfs(int v) {    color[v] = 1;
    for (int u : adj[v]) {
        if (color[u] == 0) {parent[u] = v;
            if (dfs(u)) return true;
        } else if (color[u] == 1) { cycle_end = v;cycle_start = u; return true;}}
    color[v] = 2; return false;}
void find_cycle() {
    color.assign(n, 0); parent.assign(n, -1); cycle_start = -1;
    for (int v = 0; v < n; v++) {
        if (color[v] == 0 && dfs(v)) break;}
    if (cycle_start == -1) {
        cout << "Acyclic" << endl;
    } else {
        vector<int> cycle;
        cycle.push_back(cycle_start);
        for (int v = cycle_end; v != cycle_start; v = parent[v])
            cycle.push_back(v);
        cycle.push_back(cycle_start);
        reverse(cycle.begin(), cycle.end());
        cout << "Cycle found: ";
        for (int v : cycle)
            cout << v << " ";
        cout << endl;
    }
}
Cycle - Undirected
int n;
vector<vector<int>> adj;
vector<bool> visited;
vector<int> parent;
int cycle_start, cycle_end;
bool dfs(int v, int par) { // passing vertex and its parent vertex
    visited[v] = true;
    for (int u : adj[v]) {
        if(u == par) continue; // skipping edge to parent vertex
        if (visited[u]) {
            cycle_end = v;
            cycle_start = u;
            return true;
        }
        parent[u] = v;
        if (dfs(u, parent[u]))
            return true;
    }
    return false;
}
void find_cycle() {
    visited.assign(n, false);
    parent.assign(n, -1);
    cycle_start = -1;
    for (int v = 0; v < n; v++) {
        if (!visited[v] && dfs(v, parent[v]))
            break;
    }
    if (cycle_start == -1) {
        cout << "Acyclic" << endl;
    } else {
        vector<int> cycle;
        cycle.push_back(cycle_start);
        for (int v = cycle_end; v != cycle_start; v = parent[v])
            cycle.push_back(v);
        cycle.push_back(cycle_start);


        cout << "Cycle found: ";
        for (int v : cycle)
            cout << v << " ";
        cout << endl;
    }
}
struct Edge {   int a, b, cost;};
int n, m;vector<Edge> edges;const int INF = 1000000000;
void solve()
{ vector<int> d(n); vector<int> p(n, -1);  int x;
 for (int i = 0; i < n; ++i) {
        x = -1;
        for (Edge e : edges) {
            if (d[e.a] + e.cost < d[e.b]) { d[e.b] = d[e.a] + e.cost; p[e.b] = e.a; x = e.b; }}}
    if (x == -1) {
        cout << "No negative cycle found.";
    } else {for (int i = 0; i < n; ++i) x = p[x];
        vector<int> cycle;
        for (int v = x;; v = p[v]) {cycle.push_back(v);
            if (v == x && cycle.size() > 1) break; }
        reverse(cycle.begin(), cycle.end());
        cout << "Negative cycle: ";
        for (int v : cycle) cout << v << ' '; cout << endl;
    }
}
LCA
//FOR DIRECTED GRAPH(TREE),for undirected->change the dfs function(use visited)
int LOG;
vector<vector<int>> up;
vector<int> depth;
void TreeAncestor(int n, vector<int>& parent)
{  LOG=0;
    while((1 << LOG) <= n) 
        LOG++;
    up = vector<vector<int>>(n, vector<int>(LOG));
    // up[v][j] is 2^j -th ancestor of node v
    for(int v = 0; v < n; v++)
        up[v][0] = parent[v];
    for(int j = 1; j < LOG; j++) 
        for(int v = 0; v < n; v++)
        up[v][j] = up[ up[v][j-1] ][j-1];
}
int getKthAncestor(int node, int k) 
{  if(depth[node] < k) 
        return -1;
    for(int j = LOG - 1; j >= 0; j--) 
    if(k >= (1 << j)) 
        {  node = up[node][j];
            k -= 1 << j;
        }
    return node;
}
void dfs(int vertex,vector<int> *adjlist,int curr_depth)
{
    depth[vertex]=curr_depth;
    for(auto i: adjlist[vertex])
     dfs(i,adjlist,curr_depth+1);
}
int lca(int a,int b)
{
  if(a==b)return a;
  if(depth[b]>depth[a])swap(a,b);
  if(depth[a]>depth[b])
  {
      int diff=depth[a]-depth[b];
       a=getKthAncestor(a,diff); // making depth equal
  }
  if(a==b) return a;
  for(int j=LOG-1;j>=0;j--)
   if(up[a][j]!=up[b][j])
   { a=up[a][j]; b=up[b][j];}
   return up[a][0];// returning the parent, which is lca
}




Kosaraju - Strongly Connected Component
void topoSort(int start, vector<int> *edges, vector<int>& topo, vector<bool>& visited) {
	visited[start] = true;
	for (auto i : edges[start]) {
		if (!visited[i]) {
			topoSort(i, edges, topo, visited);
		}
	}
	topo.pb(start);
}
void getComponent(int start, vector<int>* edges, vector<int>& currComponent, vector<bool>& visited) {
	currComponent.pb(start);
	visited[start] = true;
	for (auto i : edges[start]) {
		if (!visited[i]) {
			getComponent(i, edges, currComponent, visited);
		}
	}
}
vector<vector<int>> getSCC(int n, vector<int>* edges, vector<int>* edgesT) {
	vector<bool> visited(n);
	vector<int> topo;
	for (int i = 0; i < n; i++) {
		if (!visited[i]) {
			topoSort(i, edges, topo, visited);
		}
	}
	fill(visited.begin(), visited.end(), false);
	vector<vector<int>> SCC;
	for (int i = topo.size() - 1; i >= 0; i--) {
		if (!visited[topo[i]]) {
			vector<int> comp;
			getComponent(topo[i], edgesT, comp, visited);
			SCC.pb(comp);
		}
	}
	return SCC;
}
void solve() {
	int n, e;
	cin >> n >> e;
	vector<int> *edges = new vector<int>[n];
	vector<int> *edgesT = new vector<int>[n];
	for (int i = 0; i < e; i++)
	{
		int a, b;
		cin >> a >> b;
		edges[a - 1].pb(b - 1);
		edgesT[b - 1].pb(a - 1);
	}
	vector<vector<int>> SCC = getSCC(n, edges, edgesT);
}


Finding Bridges in O(n+m)
int n; // number of nodes
vector<vector<int>> adj; // adjacency list of graph


vector<bool> visited;
vector<int> tin, low;
int timer;


void dfs(int v, int p = -1) {
    visited[v] = true;
    tin[v] = low[v] = timer++;
    for (int to : adj[v]) {
        if (to == p) continue;
        if (visited[to]) {
            low[v] = min(low[v], tin[to]);
        } else {
            dfs(to, v);
            low[v] = min(low[v], low[to]);
            if (low[to] > tin[v])
                IS_BRIDGE(v, to);
        }
    }
}


void find_bridges() {
    timer = 0;
    visited.assign(n, false);
    tin.assign(n, -1);
    low.assign(n, -1);
    for (int i = 0; i < n; ++i) {
        if (!visited[i])
            dfs(i);
    }
}
Finding Articulation Point in O(m+n)
int n; // number of nodes
vector<vector<int>> adj; // adjacency list of graph
vector<bool> visited;
vector<int> tin, low;
int timer;
void dfs(int v, int p = -1) {
    visited[v] = true;
    tin[v] = low[v] = timer++;
    int children=0;
    for (int to : adj[v]) {
        if (to == p) continue;
        if (visited[to]) {
            low[v] = min(low[v], tin[to]);
        } else {
            dfs(to, v);
            low[v] = min(low[v], low[to]);
            if (low[to] >= tin[v] && p!=-1)
                IS_CUTPOINT(v);
            ++children;
        }
    }
    if(p == -1 && children > 1)
        IS_CUTPOINT(v);
}


void find_cutpoints() {
    timer = 0;
    visited.assign(n, false);
    tin.assign(n, -1);
    low.assign(n, -1);
    for (int i = 0; i < n; ++i) {
        if (!visited[i])
            dfs (i);
    }
}
Dijkstra
const int INF = 1000000000;
vector<vector<pair<int, int>>> adj;


void dijkstra(int s, vector<int> & d, vector<int> & p) {
    int n = adj.size();
    d.assign(n, INF);
    p.assign(n, -1);
    vector<bool> u(n, false);
    d[s] = 0;
    for (int i = 0; i < n; i++) {
        int v = -1;
        for (int j = 0; j < n; j++) {
            if (!u[j] && (v == -1 || d[j] < d[v]))
                v = j;
        }
        if (d[v] == INF)
            break;
        u[v] = true;
        for (auto edge : adj[v]) {
            int to = edge.first;
            int len = edge.second;
            if (d[v] + len < d[to]) {
                d[to] = d[v] + len;
                p[to] = v;
            }}}}
vector<int> restore_path(int s, int t, vector<int> const& p) {
    vector<int> path;
    for (int v = t; v != s; v = p[v])
        path.push_back(v);
    path.push_back(s);
    reverse(path.begin(), path.end()); return path;
}
Bellman Ford
void solve()
{
    vector<int> d (n, INF);
    d[v] = 0;
    vector<int> p (n, -1);
    for (;;)
    {
        bool any = false;
        for (int j = 0; j < m; ++j)
            if (d[e[j].a] < INF)
                if (d[e[j].b] > d[e[j].a] + e[j].cost)
                {
                    d[e[j].b] = d[e[j].a] + e[j].cost;
                    p[e[j].b] = e[j].a;
                    any = true;
                }
        if (!any)  break;
    }
    if (d[t] == INF)
        cout << "No path from " << v << " to " << t << ".";
    else
    {
        vector<int> path;
        for (int cur = t; cur != -1; cur = p[cur])
            path.push_back (cur);
        reverse (path.begin(), path.end());
        cout << "Path from " << v << " to " << t << ": ";
        for (size_t i=0; i<path.size(); ++i)
            cout << path[i] << ' ';
    }
}
Minimum Spanning Tree - Kruskal’s


vector<int> parent, rank;
void make_set(int v) { parent[v] = v; rank[v] = 0;}
int find_set(int v) { if (v == parent[v]) return v; return parent[v] = find_set(parent[v]);}
void union_sets(int a, int b) {a = find_set(a); b = find_set(b); if (a != b) {
if (rank[a] < rank[b])  swap(a, b); parent[b] = a; if (rank[a] == rank[b]) rank[a]++;}}
struct Edge {int u, v, weight;
    bool operator<(Edge const& other) {return weight < other.weight;}};
int n;vector<Edge> edges;int cost = 0;vector<Edge> result;parent.resize(n);rank.resize(n);
for (int i = 0; i < n; i++) make_set(i);
sort(edges.begin(), edges.end());
for (Edge e : edges) {
    if (find_set(e.u) != find_set(e.v)) {
        cost += e.weight; result.push_back(e); union_sets(e.u, e.v);}}


Floyd Warshall
// O(n ^ 3)// All pair shortest paths
// Negative Cycle needs to be checked otherwise the answer can be very negative resulting in overflows
// Maintain p[][] for getting path.Recursively find path between i and p[i][j], p[i][j] and j.
void FloydWarshall(int n, vector<pair<int, ll>> *adj, vector<vector<ll>> &dist) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) dist[i][j] = INF;
		dist[i][i] = 0;
	}
	for (int i = 0; i < n; i++) for (auto j : adj[i]) dist[i][j.ff] = min(dist[i][j.ff], j.ss);
	for (int k = 0; k < n; k++) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (dist[i][k] < INF && dist[k][j] < INF) // for updating only when there is a path
					dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
			}
		}
	}
}
Prims-Dense
int n;
vector<vector<int>> adj; // adjacency matrix of graph
const int INF = 1000000000; // weight INF means there is no edge
struct Edge {
    int w = INF, to = -1;
};
void prim() {
    int total_weight = 0;
    vector<bool> selected(n, false);
    vector<Edge> min_e(n);
    min_e[0].w = 0;
    for (int i=0; i<n; ++i) {
        int v = -1;
        for (int j = 0; j < n; ++j) {
            if (!selected[j] && (v == -1 || min_e[j].w < min_e[v].w))
                v = j;
        }
        if (min_e[v].w == INF) {
            cout << "No MST!" << endl;
            exit(0);
        }
        selected[v] = true;
        total_weight += min_e[v].w;
        if (min_e[v].to != -1)
            cout << v << " " << min_e[v].to << endl;
        for (int to = 0; to < n; ++to) {
            if (adj[v][to] < min_e[to].w)
                min_e[to] = {adj[v][to], v};
        }
    }
    cout << total_weight << endl;
}
Prims-Sparse
const int INF = 1000000000;
struct Edge {
    int w = INF, to = -1;
    bool operator<(Edge const& other) const {
        return make_pair(w, to) < make_pair(other.w, other.to);
    }
};
int n;
vector<vector<Edge>> adj;
void prim() {
    int total_weight = 0;
    vector<Edge> min_e(n);
    min_e[0].w = 0;
    set<Edge> q;
    q.insert({0, 0});
    vector<bool> selected(n, false);
    for (int i = 0; i < n; ++i) {
        if (q.empty()) {
            cout << "No MST!" << endl;
            exit(0);
        }
        int v = q.begin()->to;
        selected[v] = true;
        total_weight += q.begin()->w;
        q.erase(q.begin());
        if (min_e[v].to != -1)
            cout << v << " " << min_e[v].to << endl;
        for (Edge e : adj[v]) {
            if (!selected[e.to] && e.w < min_e[e.to].w) {
                q.erase({min_e[e.to].w, e.to});
                min_e[e.to] = {e.w, v};
                q.insert({e.w, e.to});
            }
        }
    }
    cout << total_weight << endl;
}

Troubleshoot
Pre-submit:
Write a few simple test cases if sample is not enough.
Are time limits close? If so, generate max cases.
Is the memory usage fine?
Could anything overflow?
Make sure to submit the right file.


Wrong answer:
Print your solution! Print debug output, as well.
Are you clearing all data structures between test cases?
Can your algorithm handle the whole range of input?
Read the full problem statement again.
Do you handle all corner cases correctly?
Have you understood the problem correctly?
Any uninitialized variables?
Any overflows?
Confusing N and M, i and j, etc.?
Are you sure your algorithm works?
What special cases have you not thought of?
Are you sure the STL functions you use work as you think?
Add some assertions, maybe resubmit.
Create some testcases to run your algorithm on.
Go through the algorithm for a simple case.
Go through this list again.
Explain your algorithm to a teammate.
Ask the teammate to look at your code.
Go for a small walk, e.g. to the toilet.
Is your output format correct? (including whitespace)
Rewrite your solution from the start or let a teammate do it.


Runtime error:
Have you tested all corner cases locally?
Any uninitialized variables?
Are you reading or writing outside the range of any vector?
Any assertions that might fail?
Any possible division by 0? (mod 0 for example)
Any possible infinite recursion?
Invalidated pointers or iterators?
Are you using too much memory?
Debug with resubmits (e.g. remapped signals, see Various).


Time limit exceeded:
Do you have any possible infinite loops?
What is the complexity of your algorithm?
Are you copying a lot of unnecessary data? (References)
How big is the input and output? (consider scanf)
Avoid vector, map. (use arrays/unordered_map)
What do your teammates think about your algorithm?


Memory limit exceeded:
What is the max amount of memory your algorithm should need?
Are you clearing all data structures between test cases?


