#include<bits/stdc++.h>
using namespace std;
//graph representation adjacency matrix and adjacency list
//input as n m 1 2 3   4 3 5   4 6 7 ,where n represents no. of vertices and m represents no. of edges
const int N = 1e3+9;
int graph1[N][N];//it will be initialized with 0
vector<pair<int,int>> graph2[N];
bool vis[N];
void dfs(int vertex){
    cout<<vertex<<"\n";
    vis[vertex]=true;
    for(auto child: graph2[vertex]){
        cout<<"parent "<<vertex<<", child "<<child.first<<"\n";
        if(vis[child.first])continue;
        dfs(child.first);
    }
}
int main(){
    int n,m;
    cin>>n>>m;
    int i,j,wt;
    while(m--){
        cin>>i>>j>>wt;
        graph2[i].push_back({j,wt});
        graph2[j].push_back({i,wt});
    }
    for(int i=1;i<=n;i++){
        if(vis[i])continue;
        dfs(i);  //o(v+2*e)  v times and total e edges back and forth
    }
    cin>>i>>j;
    cout<<graph1[i][j];
    for(pair<int,int> p : graph2[i]){
        if(p.first==j){
            cout<<p.second;
        }
    }
    return 0;
}
------------------------------------------------------------------------------------------------------------------------------------------------
//Cycle detection
const int N=1e5+7;
vector<int> graph2[N];

bool dfs(int vertex,int par,vector<int> adj[],bool vis[]){   
    bool iscycled=0; 
    vis[vertex]=true;
    for(auto child : adj[vertex]){
        if(vis[child] && child==par)continue;
        if(vis[child])return 1;
        iscycled |= dfs(child,vertex,adj,vis);
    }
    return iscycled;
}
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
    bool vis[V]={0};
       for(int i=0;i<V;i++){
            if(vis[i])continue;
            if(dfs(i,-1,adj,vis)){
                return 1;
            }
       }return 0;
    }
};
